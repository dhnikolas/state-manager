/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateResourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateResourceRequest{}

// CreateResourceRequest struct for CreateResourceRequest
type CreateResourceRequest struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	Finalizers []string `json:"finalizers,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	Name string `json:"name"`
	ShardId string `json:"shard_id"`
	Spec map[string]interface{} `json:"spec,omitempty"`
}

type _CreateResourceRequest CreateResourceRequest

// NewCreateResourceRequest instantiates a new CreateResourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateResourceRequest(name string, shardId string) *CreateResourceRequest {
	this := CreateResourceRequest{}
	this.Name = name
	this.ShardId = shardId
	return &this
}

// NewCreateResourceRequestWithDefaults instantiates a new CreateResourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateResourceRequestWithDefaults() *CreateResourceRequest {
	this := CreateResourceRequest{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CreateResourceRequest) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CreateResourceRequest) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *CreateResourceRequest) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetFinalizers returns the Finalizers field value if set, zero value otherwise.
func (o *CreateResourceRequest) GetFinalizers() []string {
	if o == nil || IsNil(o.Finalizers) {
		var ret []string
		return ret
	}
	return o.Finalizers
}

// GetFinalizersOk returns a tuple with the Finalizers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetFinalizersOk() ([]string, bool) {
	if o == nil || IsNil(o.Finalizers) {
		return nil, false
	}
	return o.Finalizers, true
}

// HasFinalizers returns a boolean if a field has been set.
func (o *CreateResourceRequest) HasFinalizers() bool {
	if o != nil && !IsNil(o.Finalizers) {
		return true
	}

	return false
}

// SetFinalizers gets a reference to the given []string and assigns it to the Finalizers field.
func (o *CreateResourceRequest) SetFinalizers(v []string) {
	o.Finalizers = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateResourceRequest) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateResourceRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CreateResourceRequest) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetName returns the Name field value
func (o *CreateResourceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateResourceRequest) SetName(v string) {
	o.Name = v
}

// GetShardId returns the ShardId field value
func (o *CreateResourceRequest) GetShardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShardId
}

// GetShardIdOk returns a tuple with the ShardId field value
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetShardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardId, true
}

// SetShardId sets field value
func (o *CreateResourceRequest) SetShardId(v string) {
	o.ShardId = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CreateResourceRequest) GetSpec() map[string]interface{} {
	if o == nil || IsNil(o.Spec) {
		var ret map[string]interface{}
		return ret
	}
	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateResourceRequest) GetSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Spec) {
		return map[string]interface{}{}, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CreateResourceRequest) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *CreateResourceRequest) SetSpec(v map[string]interface{}) {
	o.Spec = v
}

func (o CreateResourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateResourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Finalizers) {
		toSerialize["finalizers"] = o.Finalizers
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["shard_id"] = o.ShardId
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

func (o *CreateResourceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"shard_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateResourceRequest := _CreateResourceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateResourceRequest)

	if err != nil {
		return err
	}

	*o = CreateResourceRequest(varCreateResourceRequest)

	return err
}

type NullableCreateResourceRequest struct {
	value *CreateResourceRequest
	isSet bool
}

func (v NullableCreateResourceRequest) Get() *CreateResourceRequest {
	return v.value
}

func (v *NullableCreateResourceRequest) Set(val *CreateResourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateResourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateResourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateResourceRequest(val *CreateResourceRequest) *NullableCreateResourceRequest {
	return &NullableCreateResourceRequest{value: val, isSet: true}
}

func (v NullableCreateResourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateResourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


